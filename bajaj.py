# -*- coding: utf-8 -*-
"""Bajaj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yV4IMfNcg8brwoc_QyXGzJ0r5mCSmzXL
"""

import json
import pandas as pd

from collections import Counter

# Load the JSON data
file_path = '/content/DataEngineeringQ2.json'
with open(file_path, 'r') as file:
    data = json.load(file)

# Load the data into a pandas DataFrame for easier manipulation
df = pd.DataFrame(data)

first_name_missing = 0
last_name_missing = 0
dob_missing = 0

total_records = len(data)
for record in data:
    patient_details = record.get('patientDetails', {})


    if not patient_details.get('firstName'):
        first_name_missing += 1
    if not patient_details.get('lastName'):
        last_name_missing += 1
    if not patient_details.get('birthDate'):
        dob_missing += 1
first_name_missing_pct = (first_name_missing / total_records) * 100
last_name_missing_pct = (last_name_missing / total_records) * 100
dob_missing_pct = (dob_missing / total_records) * 100
first_name_missing_pct = round(first_name_missing_pct, 2)
last_name_missing_pct = round(last_name_missing_pct, 2)
dob_missing_pct = round(dob_missing_pct, 2)
result = f"{first_name_missing_pct}, {last_name_missing_pct}, {dob_missing_pct}"
print(result)



# Extract the number of medicines for each appointment
num_medicines = [len(appointment['consultationData']['medicines']) for appointment in data]
average_medicines = sum(num_medicines) / len(num_medicines)
average_medicines = round(average_medicines, 2)
print(average_medicines)


# Extract all medicine names from the dataset
all_medicines = [medicine['medicineName'] for appointment in data for medicine in appointment['consultationData']['medicines']]
medicine_counter = Counter(all_medicines)
third_most_common_medicine = medicine_counter.most_common(3)[2][0]
print(third_most_common_medicine)


# Extract gender column
gender_column = df['patientDetails'].apply(lambda x: x['gender'] if 'gender' in x else None)
mode_gender = gender_column.mode()[0]

gender_column_imputed = gender_column.fillna(mode_gender)
female_percentage = (gender_column_imputed == 'Female').mean() * 100
female_percentage = round(female_percentage, 2)
print(female_percentage)

# Initialize counters for active and inactive medicines
active_count = 0
inactive_count = 0
for appointment in data:
    for medicine in appointment['consultationData']['medicines']:
        if medicine['isActive']:
            active_count += 1
        else:
            inactive_count += 1
total_medicines = active_count + inactive_count
active_percentage = (active_count / total_medicines) * 100
inactive_percentage = (inactive_count / total_medicines) * 100
active_percentage = round(active_percentage, 2)
inactive_percentage = round(inactive_percentage, 2)
print(f"{active_percentage}, {inactive_percentage}")


# Function to categorize age into age groups
def categorize_age(age):
    if age <= 12:
        return 'Child'
    elif 13 <= age <= 19:
        return 'Teen'
    elif 20 <= age <= 59:
        return 'Adult'
    else:
        return 'Senior'
df['ageGroup'] = df['patientDetails'].apply(lambda x: categorize_age(x['age']))

adult_count = df['ageGroup'].value_counts().get('Adult', 0)

print(adult_count)